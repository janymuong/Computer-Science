import random
import math

# Constants
Q_LIMIT = 100  # Limit on queue length
BUSY = 1        # Server is busy
IDLE = 0        # Server is idle

# Global variables
next_event_type = 0
num_custs_delayed = 0
num_delays_required = 0
num_events = 2
num_in_q = 0
server_status = IDLE

area_num_in_q = 0.0
area_server_status = 0.0
mean_interarrival = 0.0
mean_service = 0.0
sim_time = 0.0
time_arrival = [0.0] * (Q_LIMIT + 1)
time_last_event = 0.0
time_next_event = [0.0] * 3
total_of_delays = 0.0

# Function to generate exponential random variates
def expon(mean):
    return -mean * math.log(random.random())

# Initialization function
def initialize():
    global sim_time, server_status, num_in_q, time_last_event, num_custs_delayed, total_of_delays, area_num_in_q, area_server_status, time_next_event

    sim_time = 0.0

    server_status = IDLE
    num_in_q = 0
    time_last_event = 0.0

    num_custs_delayed = 0
    total_of_delays = 0.0
    area_num_in_q = 0.0
    area_server_status = 0.0

    time_next_event[1] = sim_time + expon(mean_interarrival)
    time_next_event[2] = 1.0e30

# Timing function
def timing():
    global sim_time, next_event_type

    min_time_next_event = 1.0e29
    next_event_type = 0

    for i in range(1, num_events + 1):
        if time_next_event[i] < min_time_next_event:
            min_time_next_event = time_next_event[i]
            next_event_type = i

    if next_event_type == 0:
        with open("mm1.out", "a") as outfile:
            outfile.write("\nEvent list empty at time {:.3f}".format(sim_time))
        exit(1)

    sim_time = min_time_next_event

# Arrival event function
def arrive():
    global num_in_q, server_status, num_custs_delayed, total_of_delays, time_next_event

    time_next_event[1] = sim_time + expon(mean_interarrival)

    if server_status == BUSY:
        num_in_q += 1

        if num_in_q > Q_LIMIT:
            with open("mm1.out", "a") as outfile:
                outfile.write("\nOverflow of the array time_arrival at time {:.3f}".format(sim_time))
            exit(2)

        time_arrival[num_in_q] = sim_time
    else:
        delay = 0.0
        total_of_delays += delay

        num_custs_delayed += 1
        server_status = BUSY

        time_next_event[2] = sim_time + expon(mean_service)

# Departure event function
def depart():
    global num_in_q, server_status, num_custs_delayed, total_of_delays, time_next_event

    if num_in_q == 0:
        server_status = IDLE
        time_next_event[2] = 1.0e30
    else:
        num_in_q -= 1

        delay = sim_time - time_arrival[1]
        total_of_delays += delay

        num_custs_delayed += 1
        time_next_event[2] = sim_time + expon(mean_service)

        for i in range(1, num_in_q + 1):
            time_arrival[i] = time_arrival[i + 1]

# Report function
def report():
    global total_of_delays, num_custs_delayed, area_num_in_q, sim_time, area_server_status

    with open("mm1.out", "a") as outfile:
        outfile.write("\n\nAverage delay in queue: {:.3f} minutes".format(total_of_delays / num_custs_delayed))
        outfile.write("\nAverage number in queue: {:.3f}".format(area_num_in_q / sim_time))
        outfile.write("\nServer utilization: {:.3f}".format(area_server_status / sim_time))
        outfile.write("\nTime simulation ended: {:.3f} minutes".format(sim_time))

# Update time-average statistics function
def update_time_avg_stats():
    global time_last_event, sim_time, area_num_in_q, num_in_q, area_server_status, server_status

    time_since_last_event = sim_time - time_last_event
    time_last_event = sim_time

    area_num_in_q += num_in_q * time_since_last_event
    area_server_status += server_status * time_since_last_event

# Main function
def main():
    global mean_interarrival, mean_service, num_delays_required

    # Read input parameters from mm1.in
    with open("mm1.in", "r") as infile:
        mean_interarrival, mean_service, num_delays_required = map(float, infile.readline().split())
        num_delays_required = int(num_delays_required)

    # Open output file and write heading
    with open("mm1.out", "w") as outfile:
        outfile.write("Single-server queueing system\n\n")
        outfile.write("Mean interarrival time: {:.3f} minutes\n".format(mean_interarrival))
        outfile.write("Mean service time: {:.3f} minutes\n".format(mean_service))
        outfile.write("Number of customers: {}\n".format(num_delays_required))

    # Initialize the simulation
    initialize()

    # Run the simulation
    while num_custs_delayed < num_delays_required:
        timing()
        update_time_avg_stats()

        if next_event_type == 1:
            arrive()
        elif next_event_type == 2:
            depart()

    # Generate the report
    report()

if __name__ == "__main__":
    main()